-- Xrge - Combat only (fixed)
-- PÄƒstreazÄƒ doar secÈ›iunea Combat, restaurare target/cam È™i funcÈ›ii minime necesare.
local library = loadstring(game:HttpGet("https://pastebin.com/raw/AJi1f0KC"))()
local window = library:Window({Name = "Xrge <font color=\"rgb(0, 255, 0)\">.lol</font>", Size = Vector2.new(300, 300)})

-- Pages / Sections
local XRGECOMBAT = window:Page({Name = "Combat"})
local main, trgt, cam = XRGECOMBAT:MultiSection({Sections = {"Main", "Target", "Cam"}, Zindex = 5, Side = "Left", Size = 315})

-- Services & basic vars
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera or workspace:FindFirstChildOfClass("Camera")

-- Core config tables (trimmed but consistent)
local XrgeLol = {
    Combat = {
        Enabled = false,
        Silent = false,
        Camera = false,
        AimPart = "HumanoidRootPart",
        Prediction = { Horizontal = 0.22091, Vertical = 0.160829 },
        Smoothing = { Horizontal = 1, Vertical = 1 },
        PingBased = false,
        AutoSelect = { Enabled = false, Cooldown = { Enabled = false, Amount = 0.5 } },
        Fov = { Radius = 80 },
        Alerts = true
    }
}

local XrgeTables = {
    Functions = {},
    Locals = {
        Target = nil,
        IsTargetting = false,
        AutoSelectTick = tick()
    }
}

-- Utility functions used by the UI and features
function XrgeTables.Functions.WorldToScreen(Position)
    if not Position or not Camera then return { Position = Vector2.new(0,0), OnScreen = false } end
    local vp, on = Camera:WorldToViewportPoint(Position)
    return { Position = Vector2.new(vp.X, vp.Y), OnScreen = on }
end

-- Return player nearest to mouse (for manual aim)
function XrgeTables.Functions.GetClosestPlayer()
    local mousePos = UserInputService:GetMouseLocation()
    local closest, bestDist = nil, math.huge
    for _, pl in ipairs(Players:GetPlayers()) do
        if pl ~= LocalPlayer and pl.Character and pl.Character:FindFirstChild("HumanoidRootPart") then
            local screen = XrgeTables.Functions.WorldToScreen(pl.Character.HumanoidRootPart.Position)
            if screen.OnScreen then
                local d = (mousePos - screen.Position).Magnitude
                if d < bestDist then bestDist = d; closest = pl end
            end
        end
    end
    return closest
end

-- Return player closest to center of screen (used by AutoSelect)
function XrgeTables.Functions.GetClosestPlayerNumbah()
    local center = workspace.CurrentCamera.ViewportSize * 0.5
    local closest, bestDist = nil, math.huge
    for _, pl in ipairs(Players:GetPlayers()) do
        if pl ~= LocalPlayer and pl.Character and pl.Character:FindFirstChild("HumanoidRootPart") then
            local screen = XrgeTables.Functions.WorldToScreen(pl.Character.HumanoidRootPart.Position)
            if screen.OnScreen then
                local d = (center - screen.Position).Magnitude
                if d < bestDist then bestDist = d; closest = pl end
            end
        end
    end
    return closest
end

-- AutoSelect logic (keeps selecting nearest target if enabled)
function XrgeTables.Functions.AutoSelect()
    if XrgeLol.Combat.AutoSelect and XrgeLol.Combat.AutoSelect.Enabled then
        local cd = (XrgeLol.Combat.AutoSelect.Cooldown and XrgeLol.Combat.AutoSelect.Cooldown.Amount) or 0.5
        if tick() - XrgeTables.Locals.AutoSelectTick >= cd then
            local new = XrgeTables.Functions.GetClosestPlayerNumbah()
            XrgeTables.Locals.Target = new
            XrgeTables.Locals.IsTargetting = new and true or false
            XrgeTables.Locals.AutoSelectTick = tick()
        end
    end
end

-- Run updates
RunService.RenderStepped:Connect(function()
    XrgeTables.Functions.AutoSelect()
end)

-- Small GUI toggle (top-right) to open/close the library GUI (restored)
do
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local Frame = Instance.new("Frame", ScreenGui)
    Frame.Size = UDim2.new(0, 100, 0, 50)
    Frame.Position = UDim2.new(1, -120, 0, 0)
    Frame.BackgroundColor3 = Color3.fromRGB(20,20,20)
    Frame.BorderSizePixel = 0

    local TextButton = Instance.new("TextButton", Frame)
    TextButton.Size = UDim2.new(1, 0, 1, 0)
    TextButton.BackgroundTransparency = 1
    TextButton.Font = Enum.Font.SourceSans
    TextButton.Text = "Xrge"
    TextButton.TextScaled = true
    TextButton.TextColor3 = Color3.fromRGB(0,0,0)
    TextButton.TextStrokeTransparency = 0
    TextButton.MouseButton1Down:Connect(function()
        -- toggle the library main window
        library:SetOpen(not library.Open)
    end)
end

-- Main section (combat toggles + load buttons)
do
    main:Toggle({Name = "Enable", Callback = function(v) XrgeLol.Combat.Enabled = v end})
    main:Toggle({Name = "Target Lock", Callback = function(v) XrgeLol.Combat.Silent = v end})
    main:Toggle({Name = "Camera Lock", Callback = function(v) XrgeLol.Combat.Camera = v end})

    -- Original style Load Button (recreated with rounded corners & draggable behaviour)
    local ButtonAlreadyLoaded = false
    main:Button({Name = "Load Button", Callback = function()
        if ButtonAlreadyLoaded then
            library:Notification("Already Loaded.", 5, library.Accent)
            return
        end
        ButtonAlreadyLoaded = true

        local ScreeenGui = Instance.new("ScreenGui")
        ScreeenGui.Name = "Xrge_TargetToggleGui"
        ScreeenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
        ScreeenGui.ResetOnSpawn = false
        ScreeenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

        local Fraame = Instance.new("Frame", ScreeenGui)
        Fraame.BackgroundColor3 = Color3.fromRGB(0,0,0)
        Fraame.BackgroundTransparency = 0.8
        Fraame.Position = UDim2.new(0.1, -75, 0.5, -25)
        Fraame.Size = UDim2.new(0, 90, 0, 90)
        Fraame.ClipsDescendants = true
        Fraame.Active = true

        local uicorner = Instance.new("UICorner", Fraame)
        uicorner.CornerRadius = UDim.new(0, 9)

        local TeextButton = Instance.new("ImageButton", Fraame)
        TeextButton.BackgroundTransparency = 1
        TeextButton.Size = UDim2.new(0, 75, 0, 75)
        TeextButton.AnchorPoint = Vector2.new(0.5,0.5)
        TeextButton.Position = UDim2.new(0.5, 0, 0.5, 0)
        TeextButton.Image = "rbxassetid://135595871306427"

        -- draggable behaviour (same style as original)
        local inputService = UserInputService
        local dragging, dragInput, dragStart, startPos
        local function update(input)
            local delta = input.Position - dragStart
            Fraame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
        Fraame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = Fraame.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        Fraame.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)
        inputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                update(input)
            end
        end)

        -- Toggle targetting on click
        TeextButton.MouseButton1Down:Connect(function()
            if XrgeLol.Combat.Enabled then
                XrgeTables.Locals.IsTargetting = not XrgeTables.Locals.IsTargetting
                local NewTarget = XrgeTables.Functions.GetClosestPlayerNumbah()
                XrgeTables.Locals.Target = XrgeTables.Locals.IsTargetting and NewTarget or nil

                if XrgeLol.Combat.Alerts and XrgeTables.Locals.Target then
                    library:Notification(string.format("Target: %s", XrgeTables.Locals.Target.Name or XrgeTables.Locals.Target.DisplayName or "Unknown"), 5, library.Accent)
                end
            end
        end)
    end})

    -- New pastebin loader button (placed directly under the Load Button)
    main:Button({Name = "Load Pastebin Script", Callback = function()
        pcall(function()
            loadstring(game:HttpGet("https://pastebin.com/raw/3wJzRjDS", true))()
        end)
    end})

    main:List({Name = "Aim Part", Options = {"Head", "UpperTorso", "LowerTorso", "HumanoidRootPart"}, Default = "HumanoidRootPart", Callback = function(v) XrgeLol.Combat.AimPart = v end})
    main:Textbox({Name = "Horizontal Pred", Default = "0.22091", Callback = function(v) XrgeLol.Combat.Prediction.Horizontal = tonumber(v) or XrgeLol.Combat.Prediction.Horizontal end})
    main:Textbox({Name = "Vertical Pred", Default = "0.160829", Callback = function(v) XrgeLol.Combat.Prediction.Vertical = tonumber(v) or XrgeLol.Combat.Prediction.Vertical end})
    main:Toggle({Name = "Auto Prediction", Callback = function(v) XrgeLol.Combat.PingBased = v end})
end

-- Target section (controls and quick actions)
do
    trgt:Toggle({Name = "Auto Select Nearest", Callback = function(v) XrgeLol.Combat.AutoSelect.Enabled = v end})
    trgt:Button({Name = "Force Select Closest", Callback = function()
        local new = XrgeTables.Functions.GetClosestPlayer()
        XrgeTables.Locals.Target = new
        XrgeTables.Locals.IsTargetting = new and true or false
        if new and XrgeLol.Combat.Alerts then library:Notification("Forced target: "..(new.Name or "unknown"), 3, library.Accent) end
    end})

    trgt:Toggle({Name = "Sticky Crosshair Mode", Callback = function(v) 
        -- placeholder for crosshair mode (kept for UI parity)
        -- actual crosshair drawing is external; here we just store the flag
        XrgeLol.Combat.CrosshairSticky = v
    end})

    trgt:Button({Name = "Create/Show Target Toggle GUI", Callback = function()
        -- If user used "Load Button" earlier that creates the portable target toggle,
        -- this just notifies them to use it. Otherwise create one if missing.
        if game.Players.LocalPlayer:FindFirstChildOfClass("PlayerGui"):FindFirstChild("Xrge_TargetToggleGui") then
            library:Notification("Target GUI already present.", 3, library.Accent)
            return
        end

        -- Reuse the same code as the Load Button callback to create a portable target toggle GUI
        -- (This duplicates functionality so users can create it from Target tab as well)
        local ScreeenGui = Instance.new("ScreenGui")
        ScreeenGui.Name = "Xrge_TargetToggleGui"
        ScreeenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
        ScreeenGui.ResetOnSpawn = false
        ScreeenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

        local Fraame = Instance.new("Frame", ScreeenGui)
        Fraame.BackgroundColor3 = Color3.fromRGB(0,0,0)
        Fraame.BackgroundTransparency = 0.8
        Fraame.Position = UDim2.new(0.1, -75, 0.5, -25)
        Fraame.Size = UDim2.new(0, 90, 0, 90)
        Fraame.ClipsDescendants = true
        Fraame.Active = true

        local uicorner = Instance.new("UICorner", Fraame)
        uicorner.CornerRadius = UDim.new(0, 9)

        local TeextButton = Instance.new("ImageButton", Fraame)
        TeextButton.BackgroundTransparency = 1
        TeextButton.Size = UDim2.new(0, 75, 0, 75)
        TeextButton.AnchorPoint = Vector2.new(0.5,0.5)
        TeextButton.Position = UDim2.new(0.5, 0, 0.5, 0)
        TeextButton.Image = "rbxassetid://135595871306427"

        -- draggable
        local inputService = UserInputService
        local dragging, dragInput, dragStart, startPos
        local function update(input)
            local delta = input.Position - dragStart
            Fraame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
        Fraame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = Fraame.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        Fraame.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)
        inputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                update(input)
            end
        end)

        TeextButton.MouseButton1Down:Connect(function()
            if XrgeLol.Combat.Enabled then
                XrgeTables.Locals.IsTargetting = not XrgeTables.Locals.IsTargetting
                local NewTarget = XrgeTables.Functions.GetClosestPlayerNumbah()
                XrgeTables.Locals.Target = XrgeTables.Locals.IsTargetting and NewTarget or nil
                if XrgeLol.Combat.Alerts and XrgeTables.Locals.Target then library:Notification("Target: "..(XrgeTables.Locals.Target.Name or "unknown"), 4, library.Accent) end
            end
        end)
    end})
end

-- Cam section (kept minimal but functional)
do
    cam:List({Name = "Easing Style", Options = {"Linear","Sine","Bounce","Elastic","Back","Quad","Quart","Quint","Exponential","Circular","Cubic"}, Default = "Sine", Callback = function(v) XrgeLol.Combat.EasingStyle = v end})
    cam:List({Name = "Easing Direction", Options = {'In','Out','InOut'}, Default = "In", Callback = function(v) XrgeLol.Combat.EasingDirection = v end})
    cam:Textbox({Name = "Smoothing", Default = "1", Callback = function(v) XrgeLol.Combat.Smoothing.Horizontal = tonumber(v) or 1 end})
end

-- End of file
